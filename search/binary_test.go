package goalgorithms

import (
	"fmt"
	"math/rand"
	"testing"
)

func TestBinarySearch(t *testing.T) {
	implementations := []struct {
		name   string
		search func(needle int, haystack []int) (int, bool)
	}{
		{"BinarySearchRecursive", BinarySearchRecursive},
		{"BinarySearchLinear", BinarySearchLinear},
	}
	tests := []struct {
		name     string
		haystack []int
		needle   int
		wantIdx  int
		wantOK   bool
	}{
		{"Single existing value", []int{2}, 2, 0, true},
		{"Single non-existing value", []int{2}, 4, 0, false},
		{"First of even number of values", []int{0, 16, 25, 32, 46}, 0, 0, true},
		{"Middle of even number of values", []int{0, 16, 25, 32, 46}, 32, 3, true},
		{"Last of even number of values", []int{0, 16, 25, 32, 46}, 46, 4, true},
		{"First of odd number of values", []int{40, 41, 42, 64, 65, 75}, 40, 0, true},
		{"Middle of odd number of values", []int{40, 41, 42, 64, 65, 75}, 42, 2, true},
		{"Last of odd number of values", []int{40, 41, 42, 64, 65, 75}, 75, 5, true},
		{"Repeating values", []int{24, 24, 24, 33, 42, 42, 42}, 33, 3, true},
		{"Close non existing value", []int{24, 24, 24, 33, 42, 42, 42}, 32, 0, false},
	}
	for _, impl := range implementations {
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				gotIdx, gotOK := impl.search(tt.needle, tt.haystack)
				if gotOK != tt.wantOK {
					t.Errorf("%s(%v, %v) = %v, want %v", impl.name, tt.needle, tt.haystack, gotOK, tt.wantOK)
				} else if gotOK {
					if gotIdx != tt.wantIdx {
						t.Errorf("%s(%v, %v) = %v, want %v", impl.name, tt.needle, tt.haystack, gotIdx, tt.wantIdx)
					}
				}
			})
		}
	}
}

func BenchmarkSearch(b *testing.B) {
	tests := []struct {
		name     string
		haystack []int
	}{
		{"random", []int{
			11, 23, 103, 110, 120, 123, 141, 145, 172, 188, 208, 211, 253, 254, 259, 263, 275, 277, 283, 293,
			308, 434, 449, 473, 476, 529, 534, 569, 588, 600, 613, 664, 671, 703, 719, 721, 741, 744, 746, 755,
			763, 773, 787, 800, 838, 848, 896, 902, 930, 990,
		}},
		{"random", []int{
			120, 353, 466, 531, 625, 645, 663, 811, 879, 933, 969, 1009, 1153, 1562, 1671, 1709, 2010, 2082,
			2111, 2265, 2293, 2339, 2377, 2498, 2517, 2623, 2752, 2776, 2921, 3032, 3136, 3195, 3314, 3369, 3419,
			3482, 3502, 3505, 3742, 3873, 3976, 4090, 4231, 4387, 4426, 4469, 4484, 4485, 4489, 4785, 4807, 4854,
			4865, 4926, 4960, 5109, 5200, 5374, 5416, 5512, 5513, 5514, 5675, 5720, 5772, 5828, 5928, 6084, 6303,
			6443, 6457, 6758, 6816, 6844, 7124, 7269, 7404, 7456, 7690, 7727, 7852, 7863, 8014, 8184, 8322, 8458,
			8482, 8587, 8592, 8644, 8669, 8710, 8839, 8909, 9076, 9375, 9533, 9793, 9812, 9882,
		}},
		{"random", []int{
			55, 86, 134, 137, 161, 211, 238, 249, 255, 269, 304, 324, 334, 435, 529, 570, 598, 716, 892, 899,
			927, 1070, 1135, 1261, 1339, 1398, 1480, 1486, 1530, 1546, 1548, 1575, 1579, 1582, 1592, 1615, 1709,
			1722, 1808, 1856, 1980, 2026, 2128, 2134, 2215, 2217, 2219, 2290, 2292, 2306, 2394, 2419, 2512, 2568,
			2677, 2893, 3016, 3025, 3059, 3062, 3178, 3239, 3246, 3274, 3297, 3384, 3389, 3485, 3630, 3928, 3945,
			3951, 4080, 4202, 4211, 4407, 4429, 4502, 4517, 4565, 4632, 4675, 4707, 4738, 4774, 4800, 4804, 4898,
			5075, 5104, 5115, 5194, 5312, 5318, 5320, 5337, 5348, 5352, 5439, 5467, 5503, 5611, 5664, 5669, 5707,
			5710, 5875, 5946, 5985, 6039, 6056, 6074, 6098, 6188, 6227, 6268, 6353, 6366, 6501, 6512, 6519, 6537,
			6655, 6713, 6799, 6838, 6869, 6934, 6943, 7045, 7102, 7131, 7148, 7169, 7170, 7176, 7188, 7218, 7257,
			7285, 7335, 7479, 7485, 7548, 7565, 7586, 7597, 7628, 7734, 7747, 7797, 7900, 7922, 7924, 7958, 8048,
			8107, 8199, 8207, 8289, 8294, 8309, 8314, 8327, 8380, 8381, 8388, 8397, 8426, 8530, 8584, 8587, 8627,
			8669, 8672, 8804, 8818, 8835, 8868, 8932, 8998, 9041, 9056, 9068, 9143, 9152, 9170, 9307, 9454, 9465,
			9523, 9637, 9647, 9743, 9803, 9954, 9984, 9992, 9995, 9997,
		}},
		{"random", []int{
			34, 38, 39, 47, 68, 87, 109, 202, 223, 242, 256, 266, 297, 316, 322, 378, 413, 458, 474, 480, 489,
			495, 526, 527, 530, 572, 601, 602, 605, 606, 663, 686, 733, 748, 749, 757, 796, 802, 810, 843, 893,
			919, 931, 947, 950, 976, 986, 1007, 1054, 1101, 1119, 1132, 1158, 1160, 1164, 1199, 1222, 1240, 1244,
			1257, 1261, 1267, 1347, 1379, 1413, 1414, 1425, 1426, 1443, 1456, 1458, 1463, 1499, 1512, 1513, 1517,
			1519, 1527, 1547, 1549, 1557, 1578, 1582, 1586, 1587, 1591, 1598, 1602, 1634, 1658, 1662, 1668, 1694,
			1706, 1726, 1768, 1777, 1795, 1817, 1841, 1847, 1855, 1868, 1898, 1906, 1918, 1982, 2051, 2077, 2081,
			2085, 2115, 2119, 2129, 2145, 2152, 2173, 2177, 2207, 2208, 2259, 2269, 2282, 2311, 2312, 2360, 2373,
			2378, 2385, 2415, 2451, 2460, 2475, 2492, 2510, 2514, 2539, 2576, 2582, 2613, 2622, 2633, 2640, 2654,
			2674, 2735, 2738, 2760, 2761, 2883, 2892, 2909, 2944, 3014, 3056, 3136, 3151, 3191, 3192, 3204, 3222,
			3239, 3255, 3259, 3291, 3322, 3339, 3365, 3383, 3392, 3446, 3471, 3491, 3532, 3538, 3580, 3586, 3590,
			3591, 3657, 3700, 3721, 3722, 3727, 3741, 3742, 3743, 3760, 3783, 3826, 3828, 3867, 3873, 3878, 3895,
			3912, 4014, 4085, 4114, 4216, 4261, 4274, 4278, 4297, 4304, 4314, 4351, 4395, 4427, 4465, 4482, 4490,
			4542, 4545, 4552, 4572, 4584, 4609, 4610, 4618, 4633, 4647, 4689, 4696, 4719, 4746, 4757, 4758, 4766,
			4778, 4797, 4808, 4809, 4817, 4818, 4831, 4841, 4845, 4867, 4915, 4918, 4920, 4946, 4966, 4978, 4982,
			4999, 5014, 5015, 5032, 5051, 5052, 5098, 5169, 5177, 5195, 5200, 5214, 5251, 5270, 5303, 5305, 5310,
			5329, 5346, 5351, 5390, 5423, 5427, 5429, 5433, 5438, 5440, 5473, 5489, 5524, 5539, 5557, 5565, 5599,
			5636, 5684, 5686, 5697, 5755, 5767, 5777, 5802, 5844, 5883, 5911, 5936, 5955, 5970, 5995, 5999, 6015,
			6025, 6037, 6052, 6064, 6072, 6083, 6085, 6104, 6111, 6116, 6138, 6139, 6149, 6214, 6269, 6271, 6279,
			6292, 6308, 6310, 6328, 6330, 6336, 6358, 6398, 6455, 6491, 6518, 6523, 6538, 6566, 6590, 6617, 6638,
			6643, 6648, 6658, 6669, 6685, 6688, 6725, 6739, 6740, 6747, 6815, 6826, 6859, 6860, 6890, 6920, 6939,
			6971, 6978, 6995, 7000, 7001, 7103, 7119, 7120, 7132, 7136, 7155, 7191, 7207, 7233, 7238, 7276, 7290,
			7299, 7319, 7331, 7366, 7367, 7400, 7428, 7435, 7436, 7477, 7501, 7509, 7514, 7520, 7542, 7549, 7557,
			7566, 7588, 7636, 7683, 7699, 7706, 7712, 7732, 7761, 7763, 7764, 7800, 7864, 7873, 7877, 7879, 7898,
			7919, 7929, 7957, 7977, 7998, 8083, 8093, 8098, 8103, 8156, 8161, 8193, 8199, 8236, 8256, 8270, 8280,
			8296, 8304, 8309, 8311, 8312, 8330, 8348, 8393, 8424, 8437, 8443, 8463, 8492, 8499, 8510, 8532, 8537,
			8576, 8610, 8615, 8625, 8653, 8657, 8668, 8692, 8808, 8810, 8855, 8878, 8884, 8911, 8920, 8932, 8956,
			8960, 8968, 8985, 9005, 9040, 9043, 9071, 9078, 9144, 9146, 9194, 9223, 9244, 9249, 9261, 9277, 9339,
			9353, 9389, 9394, 9439, 9487, 9510, 9522, 9525, 9532, 9561, 9615, 9629, 9652, 9677, 9716, 9717, 9718,
			9726, 9731, 9735, 9743, 9767, 9802, 9803, 9827, 9839, 9877, 9917, 9929, 9945, 9962, 9992, 9995,
		}},
	}

	implementations := []struct {
		name   string
		search func(needle int, haystack []int) (int, bool)
	}{
		{"BinarySearchRecursive", BinarySearchRecursive},
		{"BinarySearchLinear", BinarySearchLinear},
	}
	for _, tt := range tests {
		for _, impl := range implementations {
			b.Run(impl.name+fmt.Sprintf("_%s_%d", tt.name, len(tt.haystack)), func(b *testing.B) {
				for i := 0; i < b.N; i++ {
					rndIdx := rand.Intn(len(tt.haystack))
					needle := tt.haystack[rndIdx]
					impl.search(needle, tt.haystack)
				}
			})
		}
	}
}
